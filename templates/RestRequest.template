#INCLUDE "PROTHEUS.CH"
#INCLUDE "TOTVS.CH"
#INCLUDE "RESTFUL.CH"

#DEFINE SINGLE "01"
#DEFINE ALL    "02"
#DEFINE INSERT "03"
#DEFINE DELETE "04"
#DEFINE UPDATE "05"
#DEFINE LOTE   "06"
#DEFINE BUSCA  "07"

Class ${prefix}Req${className} from ${prefix}RestRequest

    Method New(oRest,cSvcName) Constructor
    Method applyFilter(nType)
    Method applyOrder(cOrder)
    Method applyPageSize() 
    Method buscar(nType)
    Method buildBody(o${className})

    //CRUD
    Method srcSingle()     //Busca Unica
    Method srcCollection() //Busca Coleção
    Method update()
    Method insert()
    Method delete()

EndClass

Method New(oRest, cSvcName) Class ${prefix}Req${className}
    _Super:New(oRest,cSvcName)
    self:oCollection := Col${className}():New(self:oDao)
    self:oJsonObject := JsonObject():New() 
    self:oValidate := Val${className}():New(self)
Return self

Method applyPageSize() Class Req${className}
    self:oCollection:applyPageSize(self:oRest:page, self:oRest:pageSize)
    self:oRespBody["hasNext"] := .F.
    self:oRespBody["items"] := {}
Return self:lSuccess

Method buscar(nType) Class ${prefix}Req${className}

    Local lFound := .F.
    if self:lSuccess

        lFound := self:oCollection:buscar()
        if lFound
            self:lSuccess   := .T.
        else
            self:nFault     := 404
            self:cFaultDesc := "Nao foi encontrado nenhum membro com os dados informados"
            self:lSuccess   := .F.
        endif

    endif

Return

Method srcSingle() Class ${prefix}Req${className}
    
    if self:lSuccess
        self:oRespBody := self:serializeObject(self:oCollection:getNext())
        self:cResponse := self:oRespBody:toJson()
    endif

Return self:lSuccess

Method srcCollection() Class ${prefix}Req${className}

    Local nUsers := 1
    if self:lSuccess

        while self:oCollection:hasNext() .And. nUsers <= Val(self:oRest:pageSize)
            aAdd(self:oRespBody["items"], self:serializeObject(self:oCollection:getNext()))
            nUsers++
        enddo

        self:oRespBody["hasNext"] := self:oCollection:hasNext()
        self:cResponse := self:oRespBody:toJson()

    endif

Return self:lSuccess

Method insert() Class ${prefix}Req${className}

    Local oDao${className} := nil
    Local o${className} := nil
    Local oMapper := nil
    
    if self:lSuccess
        oMapper := Mpr${className}s():New()
        oMapper:mapFromJson(self:oReqBody)
        o${className} := oMapper:getEntity()
        oDao${className} := Dao${className}():New()
        if oDao${className}:insertFromList(o${className}:getFields())
            // TODO ajustar maneira de retornar ID de recursos incluidos
            o${className}:setValue("id",oDao${className}:getLastRec())
            self:oRespBody := self:serializeObject(o${className})
            self:cResponse := self:oRespBody:toJson()
        else
            self:nStatus := 500
            self:nFault := 500001
            self:cFaultDesc := "Erro ao incluir o ${className}"
            self:cFaultDetail := oDao${className}:getError()
            self:lSuccess := .F.
        endif
    endif

Return self:lSuccess

Method update() Class ${prefix}Req${className}

    Local oDao${className} := nil
    Local o${className} := nil
    Local oMapper := nil

    if self:lSuccess
        o${className} := self:oCollection:getNext()
        oMapper := Mpr${className}s():New(o${className})
        oMapper:mapFromJson(self:oReqBody)
        oDao${className} := Dao${className}():New()
        oDao${className}:setId(o${className}:getId())
        if oDao${className}:updateFromList(o${className}:getFields())
            self:oRespBody := self:serializeObject(o${className})
            self:cResponse := self:oRespBody:toJson()
        else
            self:nStatus := 500
            self:nFault := 500002
            self:cFaultDesc := "Erro ao alterar os dados do Historico"
            self:cFaultDetail := oDao${className}:getError()
            self:lSuccess := .F.
        endif
    endif

Return self:lSuccess

Method delete() Class ${prefix}Req${className}

    Local oDao${className} := nil
    Local o${className} := nil
    
    if self:lSuccess
        o${className} := self:oCollection:getNext()
        oDao${className} := Dao${className}():New()
        oDao${className}:setId(o${className}:getId())
        if oDao${className}:delete()
            self:oRespBody := self:serializeObject(o${className})
            self:cResponse := self:oRespBody:toJson()
        else
            self:nStatus := 500
            self:nFault := 500003
            self:cFaultDesc := "Erro ao deletar os dados do Historico"
            self:cFaultDetail := oDao${className}:getError()
            self:lSuccess := .F.
        endif
    endif

Return self:lSuccess


