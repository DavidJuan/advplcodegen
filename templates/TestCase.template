#Include 'Protheus.ch'

CLASS ${prefix}${className}TestCase FROM FWDefaultTestCase
	
	METHOD ${prefix}${className}TestCase()
	METHOD SetUpClass()
	METHOD TearDownClass()
	METHOD getSingle_001()
	METHOD getCollection_002()
	METHOD insert_003()
	METHOD update_004()
	METHOD delete_005()

ENDCLASS

METHOD ${prefix}${className}TestCase() CLASS ${prefix}${className}TestCase
	_Super:FWDefaultTestCase()
	self:AddTestMethod( "GETSINGLE_001",,"Busca um registro na tabela ${entity}." )
	self:AddTestMethod( "GETCOLLECTION_002",,"Busca uma coleção de registros na tabela ${entity}." )
	self:AddTestMethod( "INSERT_003",,"Insere um registro na tabela ${entity}." )
	self:AddTestMethod( "UPDATE_004",,"Altera um registro na tabela ${entity}." )
	self:AddTestMethod( "DELETE_005",,"Deleta um registro na tabela ${entity}." )
Return

METHOD SetUpClass() CLASS ${prefix}${className}TestCase
Return _Super:SetUpClass()

METHOD TearDownClass() CLASS ${prefix}${className}TestCase
	Local oResult := FWTestHelper():New()

    oResult:UTRestParam(oResult:aParam)
	DelClassIntf()
	
Return oResult

//Test Single Src
METHOD getSingle_001() CLASS ${prefix}${className}TestCase

	Local oResult := FWTestHelper():New()
	Local oCollection := ${prefix}Clt${className}():New()
	Local o${prefix}${className} := Nil

${keyVariables}
${noKeyVariables}
	/* Include first index values from ${alias}  */
${keyValues}
	oResult:activate()

	oResult:AssertTrue(oCollection:bscChaPrim(), "Registro não encontrado na entidade ${entity} com os dados informados.")

	If oCollection:hasNext()

		o${prefix}${className} := oCollection:getNext()
${compare}
	EndIf

	oCollection:destroy()
	oResult:deactivate()

Return oResult

//Test All Src
METHOD getCollection_002() CLASS ${prefix}${className}TestCase

	Local oResult := FWTestHelper():New()
	Local oCollection := ${prefix}Clt${className}():New()
	Local o${prefix}${className} := Nil
 
${noKeyVariables}
	oCollection:applyPageSize("1","2")
		
	oResult:activate()
	oResult:AssertTrue(oCollection:buscar(), "Registro não encontrado na entidade ${entity} com os dados informados.")

	if oCollection:hasNext()

		o${prefix}${className} := oCollection:getNext()
${compare}
	EndIf

	o${prefix}${className} := Nil
${cleanVarCollection}
	if oCollection:hasNext()

		o${prefix}${className} := oCollection:getNext()
${compare}
	EndIf	

	oCollection:destroy()
	oResult:deactivate()

Return oResult

//Test Insert
METHOD insert_003() CLASS ${prefix}${className}TestCase

	Local oResult := FWTestHelper():New()
	Local oCollection := ${prefix}Clt${className}():New()

${keyVariables}
${noKeyVariables}
    
	/* Include first index values from ${alias}  */
${keyValues}
	/* Values not key ${alias}  */
${noKeyValues}

	oResult:activate()
		oResult:AssertTrue(oCollection:insert(), "Não foi possivel inserir o registro na tabela ${entity} com os dados fornecidos.")
		oResult:AssertTrue(oCollection:bscChaPrim(), "Não foi possivel encontrar o registro na tabela ${entity} com os dados fornecidos.")
	oResult:deactivate()

	oCollection:destroy()
	oResult:deactivate()

Return oResult

//Test Update
METHOD update_004() CLASS ${prefix}${className}TestCase

	Local oResult := FWTestHelper():New()
	Local oCollection := ${prefix}Clt${className}():New()
	Local o${prefix}${className} := Nil

${keyVariables}
${noKeyVariables}
    
	/* Include first index values from ${alias}  */
${keyValues}
	oResult:activate()
	oResult:assertTrue(oCollection:bscChaPrim(), "Registro não encontrado na entidade ${entity} com os dados informados.")

	If oResult:lOk

		o${prefix}${className} := oCollection:getNext()
${changeValues}
		oCollection:setEntity(o${prefix}${className})
		oResult:assertTrue(oCollection:update(), "Registro não pode ser alterado na entidade ${entity} com os dados informados.")

    EndIf

    oResult:assertTrue(oCollection:bscChaPrim(),  "Registro não encontrado na entidade ${entity} com os dados informados.")

	If oCollection:hasNext()
		
		o${prefix}${className} := nil
		o${prefix}${className} := oCollection:getNext()
${compare}
	EndIf

	oCollection:destroy()
	oResult:deactivate()

Return oResult

//Test Delete
METHOD delete_005() CLASS ${prefix}${className}TestCase

	Local oResult := FWTestHelper():New()
	Local oCollection := ${prefix}Clt${className}():New()

${keyVariables}	
    
	/* Include first index values from ${alias}  */
${keyValues}
	oResult:activate()
	oResult:AssertTrue(oCollection:delete(), "Não foi possivel deletar o registro na entidade ${entity} com os dados informados.")
	oResult:AssertFalse(oCollection:bscChaPrim(), "Registro não foi deletado.")
	
	oCollection:destroy()
	oResult:deactivate()

Return oResult
