#include "TOTVS.CH"
#include 'FWMVCDEF.CH'

/*/ ${prefix}JsonControl
Encapsula objeto da TEC JsonObject para controlar os filtros

@type   class
@author victor.silva
@since  20180523
/*/

Class ${prefix}JsonControl

    Data hmFields
    Data hmExpand
    Data lFiltered
    Data lExpanding
    
    Method New()
    
    Method prepFields(cFields)
    
    Method notFiltered()
    Method fillArray(oJson,cProp,oValue)
    Method newArray(oJson,cProp)
    Method newObj(oJson,cProp)
    Method printProp(cProp)
    Method setProp(oJson,cProp,cValue)
    Method setPropObj(oJson,cObj,cProp,cValue)
    Method addObjtoProp(oJson,cProp, oObj)

EndClass

Method New() Class ${prefix}JsonControl
    self:lFiltered     := .F.
    self:lExpanding    := .F.
    self:hmFields      := THashMap():New()
    self:hmExpand      := THashMap():New()
Return self

Method prepFields(cFields) Class ${prefix}JsonControl
    Local aFields     := {}
    Local nFields     := 1
    Local nLenFields  := 0

    if !empty(cFields)
        self:lFiltered := .T.
        aFields := StrTokArr2(cFields, ",")
        nLenFields := Len(aFields)
        self:hmFields:set("nLenFields",nLenFields)
        for nFields := 1 to nLenFields
            self:hmFields:set(aFields[nFields],aFields[nFields])
        next nFields
    endif
    
return

Method notFiltered() Class ${prefix}JsonControl
Return !self:lFiltered .Or. self:lExpanding

Method fillArray(oJson,cProp,oValue) Class ${prefix}JsonControl
    
    if !empty(oValue)
        aAdd(oJson[cProp],oValue:serialize(self))
    else
        aAdd(oJson[cProp],JsonObject():New())
    endif
return

Method addObjtoProp(oJson,cProp, oObj) Class ${prefix}JsonControl
    
    if !empty(oObj:toJson())
        aAdd(oJson[cProp], oObj)
    else
        aAdd(oJson[cProp],JsonObject():New())
    endif

return

Method newArray(oJson,cProp) Class ${prefix}JsonControl
    oJson[cProp] := {}
return

Method newObj(oJson,cProp) Class ${prefix}JsonControl
    oJson[cProp] := JsonObject():New()
return

Method printProp(cProp) Class ${prefix}JsonControl
return !self:lFiltered .Or. (self:lFiltered .And. self:hmFields:get(cProp))

Method setProp(oJson,cProp,cValue) Class ${prefix}JsonControl
    if self:printProp(cProp) .Or. self:lExpanding
        oJson[cProp] := cValue
    endif
return

Method setPropObj(oJson,cObj,cProp,cValue) Class ${prefix}JsonControl
    if self:printProp(cProp) .Or. self:lExpanding
        oJson[cObj][cProp] := cValue
    endif
return
