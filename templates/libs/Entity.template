#include "TOTVS.CH"
//#include "autorizador.ch"

/*/{Protheus.doc} 
    Classe abstrata de uma entidade de negócio
    @type  Class
    @author 
    @since 
/*/
Class ${prefix}Entity 

    Data hMap
    Data cJson
    Data nRecno
    Data oHashFields
	
	Method New() Constructor
	
	Method getHMap()
	Method setHMap(hMap)
	Method setValue(cProperty,xData)
	Method destroy()
	Method getValue(cProperty)
	Method dateToUtc(dDate, cTime, utc)
	Method utcToDate(cUtcDate)
	Method setHashFields(oHashFields)

EndClass

Method New() Class ${prefix}Entity
	self:hMap 		:= THashMap():New()
	self:nRecno 	:= 1
Return self

Method getHMap() Class ${prefix}Entity
Return self:hMap

Method setHMap(hMap) Class ${prefix}Entity
	self:hMap := hMap
Return

Method setValue(cProperty,xData) Class ${prefix}Entity
Return self:hMap:set(cProperty,xData)

Method destroy() Class ${prefix}Entity
	if !empty(self:hMap)
        self:hMap:clean()
        FreeObj(self:hMap)
        self:hMap := nil
    endif
	if !empty(self:oHashFields)
        self:oHashFields:clean()
        FreeObj(self:oHashFields)
        self:oHashFields := nil
    endif
return

Method getValue(cProperty) Class ${prefix}Entity
	Local anyValue := ""
	self:hMap:get(cProperty,@anyValue)
Return anyValue

Method dateToUtc(dDate, cTime, utc) Class ${prefix}Entity

	Local cUtcDate := ""
	Local dVoidDate := STOD("")

	If dDate != dVoidDate
		If utc 
			cUtcDate := allTrim(FWTimeStamp(5, dDate, cTime))  
		else
			cUtcDate := SubStr(allTrim(FWTimeStamp(5, dDate, cTime)), 1, 10)
		EndIF
	EndIf

Return cUtcDate

Method utcToDate(cUtcDate) Class ${prefix}Entity
	
	Local dDate := STOD("")

	If !Empty(cUtcDate)
		dDate := STOD(SubStr(allTrim(STRTRAN(cUtcDate, "-", "")), 1, 8))
	EndIF

Return dDate

//Armazena os fields para serializar a saida Json do Objeto
Method setHashFields(oHashFields) Class ${prefix}Entity
    self:oHashFields := oHashFields
Return